How did viewing a diff between two versions of a file help you see the bug that was introduced?
It was easy to identify the changes easily rather than going line by line.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
When it comes to a businss logic, it can change over time. According to that changes, the code will too change. But what if the business logic changes 
back to a previously practiced one? Then if the developer has access to the entire file history, he can restore it with less hassle.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?
Pros: We can decide what logical blocks should be seperated out
Con: System/ storage crash will remove all the uncommitted changes

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
Git is a code related version control system. Therefore it is logical to interrelate one change in another file. therefore Git allows the users to save multiple files within a single commit.

How can you use the commands git log and git diff to view the history of files?
git log - shows the entire version history if the given repository. with ID, autor and date
git diff - shows the difference between two commits of the repository.

How might using version control make you more confident to make changes that could break something?
Eventhough it may break something, you can have the safe feeling that you can always revert back to an older version, which is unbriken.

Now that you have your workspace set up, what do you want to try using Git for?
I want to use Git to manage my workspace files for changes that I am going to do.